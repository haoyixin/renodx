Texture2D<float4> ColorTexture : register(t0);

RWTexture2D<float4> RWOutputTexture : register(u0);

cbuffer _RootShaderParameters : register(b0) {
  float3 InverseGamma : packoffset(c002.x);
  uint OutputDevice : packoffset(c002.w);
  uint OutputGamut : packoffset(c003.x);
  float OutputMaxLuminance : packoffset(c003.y);
  float2 Color_Extent : packoffset(c004.x);
  float2 Color_ExtentInverse : packoffset(c004.z);
  float2 Color_ScreenPosToViewportScale : packoffset(c005.x);
  float2 Color_ScreenPosToViewportBias : packoffset(c005.z);
  uint2 Color_ViewportMin : packoffset(c006.x);
  uint2 Color_ViewportMax : packoffset(c006.z);
  float2 Color_ViewportSize : packoffset(c007.x);
  float2 Color_ViewportSizeInverse : packoffset(c007.z);
  float2 Color_UVViewportMin : packoffset(c008.x);
  float2 Color_UVViewportMax : packoffset(c008.z);
  float2 Color_UVViewportSize : packoffset(c009.x);
  float2 Color_UVViewportSizeInverse : packoffset(c009.z);
  float2 Color_UVViewportBilinearMin : packoffset(c010.x);
  float2 Color_UVViewportBilinearMax : packoffset(c010.z);
  float2 Output_Extent : packoffset(c011.x);
  float2 Output_ExtentInverse : packoffset(c011.z);
  float2 Output_ScreenPosToViewportScale : packoffset(c012.x);
  float2 Output_ScreenPosToViewportBias : packoffset(c012.z);
  uint2 Output_ViewportMin : packoffset(c013.x);
  uint2 Output_ViewportMax : packoffset(c013.z);
  float2 Output_ViewportSize : packoffset(c014.x);
  float2 Output_ViewportSizeInverse : packoffset(c014.z);
  float2 Output_UVViewportMin : packoffset(c015.x);
  float2 Output_UVViewportMax : packoffset(c015.z);
  float2 Output_UVViewportSize : packoffset(c016.x);
  float2 Output_UVViewportSizeInverse : packoffset(c016.z);
  float2 Output_UVViewportBilinearMin : packoffset(c017.x);
  float2 Output_UVViewportBilinearMax : packoffset(c017.z);
  float4 ACESMinMaxData : packoffset(c018.x);
  float4 ACESMidData : packoffset(c019.x);
  float4 ACESCoefsLow_0 : packoffset(c020.x);
  float4 ACESCoefsHigh_0 : packoffset(c021.x);
  float ACESCoefsLow_4 : packoffset(c022.x);
  float ACESCoefsHigh_4 : packoffset(c022.y);
  float ACESSceneColorMultiplier : packoffset(c022.z);
  float EditorNITLevel : packoffset(c024.x);
  uint bOutputInHDR : packoffset(c024.y);
};

cbuffer UniformBufferConstants_WorkingColorSpace : register(b1) {
  float4 WorkingColorSpace_ToXYZ[4] : packoffset(c000.x);
  float4 WorkingColorSpace_FromXYZ[4] : packoffset(c004.x);
  float4 WorkingColorSpace_ToAP1[4] : packoffset(c008.x);
  float4 WorkingColorSpace_FromAP1[4] : packoffset(c012.x);
  float4 WorkingColorSpace_ToAP0[4] : packoffset(c016.x);
  uint WorkingColorSpace_bIsSRGB : packoffset(c020.x);
};

SamplerState ColorSampler : register(s0);

[numthreads(8, 8, 1)]
void main(
  uint3 SV_DispatchThreadID : SV_DispatchThreadID,
  uint3 SV_GroupID : SV_GroupID,
  uint3 SV_GroupThreadID : SV_GroupThreadID,
  uint SV_GroupIndex : SV_GroupIndex
) {
  float _10[6];
  float _11[6];
  float _12[6];
  float _13[6];
  float _14[6];
  float _15[6];
  float _16[6];
  float _17[6];
  float _32 = ((float((uint)SV_DispatchThreadID.x) + 0.5f) + float((uint)Output_ViewportMin.x)) * Output_ExtentInverse.x;
  float _33 = ((float((uint)SV_DispatchThreadID.y) + 0.5f) + float((uint)Output_ViewportMin.y)) * Output_ExtentInverse.y;
  float _66;
  float _67;
  float _68;
  float _69;
  float _70;
  float _71;
  float _72;
  float _73;
  float _74;
  float _128;
  float _129;
  float _130;
  float _141;
  float _152;
  float _330;
  float _363;
  float _377;
  float _416;
  float _526;
  float _600;
  float _674;
  float _897;
  float _930;
  float _944;
  float _983;
  float _1093;
  float _1167;
  float _1241;
  float _1464;
  float _1497;
  float _1511;
  float _1550;
  float _1660;
  float _1734;
  float _1808;
  float _2086;
  float _2119;
  float _2133;
  float _2172;
  float _2282;
  float _2356;
  float _2430;
  float _2737;
  float _2738;
  float _2739;
  if (!(max(abs(_32 + -0.5f), abs(_33 + -0.5f)) >= 0.5f)) {
    float4 _43 = ColorTexture.SampleLevel(ColorSampler, float2(_32, _33), 0.0f);
    do {
      if (!((uint)(OutputGamut) == 1)) {
        if (!((uint)(OutputGamut) == 2)) {
          if (!((uint)(OutputGamut) == 3)) {
            bool _55 = ((uint)(OutputGamut) == 4);
            _66 = select(_55, 1.0f, 1.705051064491272f);
            _67 = select(_55, 0.0f, -0.6217921376228333f);
            _68 = select(_55, 0.0f, -0.0832589864730835f);
            _69 = select(_55, 0.0f, -0.13025647401809692f);
            _70 = select(_55, 1.0f, 1.140804648399353f);
            _71 = select(_55, 0.0f, -0.010548308491706848f);
            _72 = select(_55, 0.0f, -0.024003351107239723f);
            _73 = select(_55, 0.0f, -0.1289689838886261f);
            _74 = select(_55, 1.0f, 1.1529725790023804f);
          } else {
            _66 = 0.6954522132873535f;
            _67 = 0.14067870378494263f;
            _68 = 0.16386906802654266f;
            _69 = 0.044794563204050064f;
            _70 = 0.8596711158752441f;
            _71 = 0.0955343171954155f;
            _72 = -0.005525882821530104f;
            _73 = 0.004025210160762072f;
            _74 = 1.0015007257461548f;
          }
        } else {
          _66 = 1.0258246660232544f;
          _67 = -0.020053181797266006f;
          _68 = -0.005771636962890625f;
          _69 = -0.002234415616840124f;
          _70 = 1.0045864582061768f;
          _71 = -0.002352118492126465f;
          _72 = -0.005013350863009691f;
          _73 = -0.025290070101618767f;
          _74 = 1.0303035974502563f;
        }
      } else {
        _66 = 1.3792141675949097f;
        _67 = -0.30886411666870117f;
        _68 = -0.0703500509262085f;
        _69 = -0.06933490186929703f;
        _70 = 1.08229660987854f;
        _71 = -0.012961871922016144f;
        _72 = -0.0021590073592960835f;
        _73 = -0.0454593189060688f;
        _74 = 1.0476183891296387f;
      }
      float _86 = exp2(log2(max(0.0f, _43.x)) * InverseGamma.y);
      float _87 = exp2(log2(max(0.0f, _43.y)) * InverseGamma.y);
      float _88 = exp2(log2(max(0.0f, _43.z)) * InverseGamma.y);
      do {
        [branch]
        if ((uint)(OutputDevice) == 0) {
          do {
            if ((uint)(WorkingColorSpace_bIsSRGB) == 0) {
              float _111 = mad((WorkingColorSpace_ToAP1[0].z), _88, mad((WorkingColorSpace_ToAP1[0].y), _87, ((WorkingColorSpace_ToAP1[0].x) * _86)));
              float _114 = mad((WorkingColorSpace_ToAP1[1].z), _88, mad((WorkingColorSpace_ToAP1[1].y), _87, ((WorkingColorSpace_ToAP1[1].x) * _86)));
              float _117 = mad((WorkingColorSpace_ToAP1[2].z), _88, mad((WorkingColorSpace_ToAP1[2].y), _87, ((WorkingColorSpace_ToAP1[2].x) * _86)));
              _128 = mad(_68, _117, mad(_67, _114, (_111 * _66)));
              _129 = mad(_71, _117, mad(_70, _114, (_111 * _69)));
              _130 = mad(_74, _117, mad(_73, _114, (_111 * _72)));
            } else {
              _128 = _86;
              _129 = _87;
              _130 = _88;
            }
            do {
              if (_128 < 0.0031306699384003878f) {
                _141 = (_128 * 12.920000076293945f);
              } else {
                _141 = (((pow(_128, 0.4166666567325592f)) * 1.0549999475479126f) + -0.054999999701976776f);
              }
              do {
                if (_129 < 0.0031306699384003878f) {
                  _152 = (_129 * 12.920000076293945f);
                } else {
                  _152 = (((pow(_129, 0.4166666567325592f)) * 1.0549999475479126f) + -0.054999999701976776f);
                }
                if (_130 < 0.0031306699384003878f) {
                  _2737 = _141;
                  _2738 = _152;
                  _2739 = (_130 * 12.920000076293945f);
                } else {
                  _2737 = _141;
                  _2738 = _152;
                  _2739 = (((pow(_130, 0.4166666567325592f)) * 1.0549999475479126f) + -0.054999999701976776f);
                }
              } while (false);
            } while (false);
          } while (false);
        } else {
          if ((uint)(OutputDevice) == 1) {
            float _179 = mad((WorkingColorSpace_ToAP1[0].z), _88, mad((WorkingColorSpace_ToAP1[0].y), _87, ((WorkingColorSpace_ToAP1[0].x) * _86)));
            float _182 = mad((WorkingColorSpace_ToAP1[1].z), _88, mad((WorkingColorSpace_ToAP1[1].y), _87, ((WorkingColorSpace_ToAP1[1].x) * _86)));
            float _185 = mad((WorkingColorSpace_ToAP1[2].z), _88, mad((WorkingColorSpace_ToAP1[2].y), _87, ((WorkingColorSpace_ToAP1[2].x) * _86)));
            float _195 = max(6.103519990574569e-05f, mad(_68, _185, mad(_67, _182, (_179 * _66))));
            float _196 = max(6.103519990574569e-05f, mad(_71, _185, mad(_70, _182, (_179 * _69))));
            float _197 = max(6.103519990574569e-05f, mad(_74, _185, mad(_73, _182, (_179 * _72))));
            _2737 = min((_195 * 4.5f), ((exp2(log2(max(_195, 0.017999999225139618f)) * 0.44999998807907104f) * 1.0989999771118164f) + -0.0989999994635582f));
            _2738 = min((_196 * 4.5f), ((exp2(log2(max(_196, 0.017999999225139618f)) * 0.44999998807907104f) * 1.0989999771118164f) + -0.0989999994635582f));
            _2739 = min((_197 * 4.5f), ((exp2(log2(max(_197, 0.017999999225139618f)) * 0.44999998807907104f) * 1.0989999771118164f) + -0.0989999994635582f));
          } else {
            if ((uint)(OutputDevice) == 3) {
              _16[0] = ACESCoefsLow_0.x;
              _16[1] = ACESCoefsLow_0.y;
              _16[2] = ACESCoefsLow_0.z;
              _16[3] = ACESCoefsLow_0.w;
              _16[4] = ACESCoefsLow_4;
              _16[5] = ACESCoefsLow_4;
              _17[0] = ACESCoefsHigh_0.x;
              _17[1] = ACESCoefsHigh_0.y;
              _17[2] = ACESCoefsHigh_0.z;
              _17[3] = ACESCoefsHigh_0.w;
              _17[4] = ACESCoefsHigh_4;
              _17[5] = ACESCoefsHigh_4;
              float _270 = ACESSceneColorMultiplier * _86;
              float _271 = ACESSceneColorMultiplier * _87;
              float _272 = ACESSceneColorMultiplier * _88;
              float _275 = mad((WorkingColorSpace_ToAP0[0].z), _272, mad((WorkingColorSpace_ToAP0[0].y), _271, ((WorkingColorSpace_ToAP0[0].x) * _270)));
              float _278 = mad((WorkingColorSpace_ToAP0[1].z), _272, mad((WorkingColorSpace_ToAP0[1].y), _271, ((WorkingColorSpace_ToAP0[1].x) * _270)));
              float _281 = mad((WorkingColorSpace_ToAP0[2].z), _272, mad((WorkingColorSpace_ToAP0[2].y), _271, ((WorkingColorSpace_ToAP0[2].x) * _270)));
              float _285 = max(max(_275, _278), _281);
              float _290 = (max(_285, 1.000000013351432e-10f) - max(min(min(_275, _278), _281), 1.000000013351432e-10f)) / max(_285, 0.009999999776482582f);
              float _303 = ((_278 + _275) + _281) + (sqrt((((_281 - _278) * _281) + ((_278 - _275) * _278)) + ((_275 - _281) * _275)) * 1.75f);
              float _304 = _303 * 0.3333333432674408f;
              float _305 = _290 + -0.4000000059604645f;
              float _306 = _305 * 5.0f;
              float _310 = max((1.0f - abs(_305 * 2.5f)), 0.0f);
              float _321 = ((float(((int)(uint)((bool)(_306 > 0.0f))) - ((int)(uint)((bool)(_306 < 0.0f)))) * (1.0f - (_310 * _310))) + 1.0f) * 0.02500000037252903f;
              do {
                if (!(_304 <= 0.0533333346247673f)) {
                  if (!(_304 >= 0.1599999964237213f)) {
                    _330 = (((0.23999999463558197f / _303) + -0.5f) * _321);
                  } else {
                    _330 = 0.0f;
                  }
                } else {
                  _330 = _321;
                }
                float _331 = _330 + 1.0f;
                float _332 = _331 * _275;
                float _333 = _331 * _278;
                float _334 = _331 * _281;
                do {
                  if (!((bool)(_332 == _333) && (bool)(_333 == _334))) {
                    float _341 = ((_332 * 2.0f) - _333) - _334;
                    float _344 = ((_278 - _281) * 1.7320507764816284f) * _331;
                    float _346 = atan(_344 / _341);
                    bool _349 = (_341 < 0.0f);
                    bool _350 = (_341 == 0.0f);
                    bool _351 = (_344 >= 0.0f);
                    bool _352 = (_344 < 0.0f);
                    _363 = select((_351 && _350), 90.0f, select((_352 && _350), -90.0f, (select((_352 && _349), (_346 + -3.1415927410125732f), select((_351 && _349), (_346 + 3.1415927410125732f), _346)) * 57.2957763671875f)));
                  } else {
                    _363 = 0.0f;
                  }
                  float _368 = min(max(select((_363 < 0.0f), (_363 + 360.0f), _363), 0.0f), 360.0f);
                  do {
                    if (_368 < -180.0f) {
                      _377 = (_368 + 360.0f);
                    } else {
                      if (_368 > 180.0f) {
                        _377 = (_368 + -360.0f);
                      } else {
                        _377 = _368;
                      }
                    }
                    do {
                      if ((bool)(_377 > -67.5f) && (bool)(_377 < 67.5f)) {
                        float _383 = (_377 + 67.5f) * 0.029629629105329514f;
                        int _384 = int(_383);
                        float _386 = _383 - float(_384);
                        float _387 = _386 * _386;
                        float _388 = _387 * _386;
                        if (_384 == 3) {
                          _416 = (((0.1666666716337204f - (_386 * 0.5f)) + (_387 * 0.5f)) - (_388 * 0.1666666716337204f));
                        } else {
                          if (_384 == 2) {
                            _416 = ((0.6666666865348816f - _387) + (_388 * 0.5f));
                          } else {
                            if (_384 == 1) {
                              _416 = (((_388 * -0.5f) + 0.1666666716337204f) + ((_387 + _386) * 0.5f));
                            } else {
                              _416 = select((_384 == 0), (_388 * 0.1666666716337204f), 0.0f);
                            }
                          }
                        }
                      } else {
                        _416 = 0.0f;
                      }
                      float _425 = min(max(((((_290 * 0.27000001072883606f) * (0.029999999329447746f - _332)) * _416) + _332), 0.0f), 65535.0f);
                      float _426 = min(max(_333, 0.0f), 65535.0f);
                      float _427 = min(max(_334, 0.0f), 65535.0f);
                      float _440 = min(max(mad(-0.21492856740951538f, _427, mad(-0.2365107536315918f, _426, (_425 * 1.4514392614364624f))), 0.0f), 65504.0f);
                      float _441 = min(max(mad(-0.09967592358589172f, _427, mad(1.17622971534729f, _426, (_425 * -0.07655377686023712f))), 0.0f), 65504.0f);
                      float _442 = min(max(mad(0.9977163076400757f, _427, mad(-0.006032449658960104f, _426, (_425 * 0.008316148072481155f))), 0.0f), 65504.0f);
                      float _443 = dot(float3(_440, _441, _442), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                      float _454 = log2(max((lerp(_443, _440, 0.9599999785423279f)), 1.000000013351432e-10f));
                      float _455 = _454 * 0.3010300099849701f;
                      float _456 = log2(ACESMinMaxData.x);
                      float _457 = _456 * 0.3010300099849701f;
                      do {
                        if (!(!(_455 <= _457))) {
                          _526 = (log2(ACESMinMaxData.y) * 0.3010300099849701f);
                        } else {
                          float _464 = log2(ACESMidData.x);
                          float _465 = _464 * 0.3010300099849701f;
                          if ((bool)(_455 > _457) && (bool)(_455 < _465)) {
                            float _473 = ((_454 - _456) * 0.9030900001525879f) / ((_464 - _456) * 0.3010300099849701f);
                            int _474 = int(_473);
                            float _476 = _473 - float(_474);
                            float _478 = _16[_474];
                            float _481 = _16[(_474 + 1)];
                            float _486 = _478 * 0.5f;
                            _526 = dot(float3((_476 * _476), _476, 1.0f), float3(mad((_16[(_474 + 2)]), 0.5f, mad(_481, -1.0f, _486)), (_481 - _478), mad(_481, 0.5f, _486)));
                          } else {
                            do {
                              if (!(!(_455 >= _465))) {
                                float _495 = log2(ACESMinMaxData.z);
                                if (_455 < (_495 * 0.3010300099849701f)) {
                                  float _503 = ((_454 - _464) * 0.9030900001525879f) / ((_495 - _464) * 0.3010300099849701f);
                                  int _504 = int(_503);
                                  float _506 = _503 - float(_504);
                                  float _508 = _17[_504];
                                  float _511 = _17[(_504 + 1)];
                                  float _516 = _508 * 0.5f;
                                  _526 = dot(float3((_506 * _506), _506, 1.0f), float3(mad((_17[(_504 + 2)]), 0.5f, mad(_511, -1.0f, _516)), (_511 - _508), mad(_511, 0.5f, _516)));
                                  break;
                                }
                              }
                              _526 = (log2(ACESMinMaxData.w) * 0.3010300099849701f);
                            } while (false);
                          }
                        }
                        float _530 = log2(max((lerp(_443, _441, 0.9599999785423279f)), 1.000000013351432e-10f));
                        float _531 = _530 * 0.3010300099849701f;
                        do {
                          if (!(!(_531 <= _457))) {
                            _600 = (log2(ACESMinMaxData.y) * 0.3010300099849701f);
                          } else {
                            float _538 = log2(ACESMidData.x);
                            float _539 = _538 * 0.3010300099849701f;
                            if ((bool)(_531 > _457) && (bool)(_531 < _539)) {
                              float _547 = ((_530 - _456) * 0.9030900001525879f) / ((_538 - _456) * 0.3010300099849701f);
                              int _548 = int(_547);
                              float _550 = _547 - float(_548);
                              float _552 = _16[_548];
                              float _555 = _16[(_548 + 1)];
                              float _560 = _552 * 0.5f;
                              _600 = dot(float3((_550 * _550), _550, 1.0f), float3(mad((_16[(_548 + 2)]), 0.5f, mad(_555, -1.0f, _560)), (_555 - _552), mad(_555, 0.5f, _560)));
                            } else {
                              do {
                                if (!(!(_531 >= _539))) {
                                  float _569 = log2(ACESMinMaxData.z);
                                  if (_531 < (_569 * 0.3010300099849701f)) {
                                    float _577 = ((_530 - _538) * 0.9030900001525879f) / ((_569 - _538) * 0.3010300099849701f);
                                    int _578 = int(_577);
                                    float _580 = _577 - float(_578);
                                    float _582 = _17[_578];
                                    float _585 = _17[(_578 + 1)];
                                    float _590 = _582 * 0.5f;
                                    _600 = dot(float3((_580 * _580), _580, 1.0f), float3(mad((_17[(_578 + 2)]), 0.5f, mad(_585, -1.0f, _590)), (_585 - _582), mad(_585, 0.5f, _590)));
                                    break;
                                  }
                                }
                                _600 = (log2(ACESMinMaxData.w) * 0.3010300099849701f);
                              } while (false);
                            }
                          }
                          float _604 = log2(max((lerp(_443, _442, 0.9599999785423279f)), 1.000000013351432e-10f));
                          float _605 = _604 * 0.3010300099849701f;
                          do {
                            if (!(!(_605 <= _457))) {
                              _674 = (log2(ACESMinMaxData.y) * 0.3010300099849701f);
                            } else {
                              float _612 = log2(ACESMidData.x);
                              float _613 = _612 * 0.3010300099849701f;
                              if ((bool)(_605 > _457) && (bool)(_605 < _613)) {
                                float _621 = ((_604 - _456) * 0.9030900001525879f) / ((_612 - _456) * 0.3010300099849701f);
                                int _622 = int(_621);
                                float _624 = _621 - float(_622);
                                float _626 = _16[_622];
                                float _629 = _16[(_622 + 1)];
                                float _634 = _626 * 0.5f;
                                _674 = dot(float3((_624 * _624), _624, 1.0f), float3(mad((_16[(_622 + 2)]), 0.5f, mad(_629, -1.0f, _634)), (_629 - _626), mad(_629, 0.5f, _634)));
                              } else {
                                do {
                                  if (!(!(_605 >= _613))) {
                                    float _643 = log2(ACESMinMaxData.z);
                                    if (_605 < (_643 * 0.3010300099849701f)) {
                                      float _651 = ((_604 - _612) * 0.9030900001525879f) / ((_643 - _612) * 0.3010300099849701f);
                                      int _652 = int(_651);
                                      float _654 = _651 - float(_652);
                                      float _656 = _17[_652];
                                      float _659 = _17[(_652 + 1)];
                                      float _664 = _656 * 0.5f;
                                      _674 = dot(float3((_654 * _654), _654, 1.0f), float3(mad((_17[(_652 + 2)]), 0.5f, mad(_659, -1.0f, _664)), (_659 - _656), mad(_659, 0.5f, _664)));
                                      break;
                                    }
                                  }
                                  _674 = (log2(ACESMinMaxData.w) * 0.3010300099849701f);
                                } while (false);
                              }
                            }
                            float _678 = ACESMinMaxData.w - ACESMinMaxData.y;
                            float _679 = (exp2(_526 * 3.321928024291992f) - ACESMinMaxData.y) / _678;
                            float _681 = (exp2(_600 * 3.321928024291992f) - ACESMinMaxData.y) / _678;
                            float _683 = (exp2(_674 * 3.321928024291992f) - ACESMinMaxData.y) / _678;
                            float _686 = mad(0.15618768334388733f, _683, mad(0.13400420546531677f, _681, (_679 * 0.6624541878700256f)));
                            float _689 = mad(0.053689517080783844f, _683, mad(0.6740817427635193f, _681, (_679 * 0.2722287178039551f)));
                            float _692 = mad(1.0103391408920288f, _683, mad(0.00406073359772563f, _681, (_679 * -0.005574649665504694f)));
                            float _705 = min(max(mad(-0.23642469942569733f, _692, mad(-0.32480329275131226f, _689, (_686 * 1.6410233974456787f))), 0.0f), 1.0f);
                            float _706 = min(max(mad(0.016756348311901093f, _692, mad(1.6153316497802734f, _689, (_686 * -0.663662850856781f))), 0.0f), 1.0f);
                            float _707 = min(max(mad(0.9883948564529419f, _692, mad(-0.008284442126750946f, _689, (_686 * 0.011721894145011902f))), 0.0f), 1.0f);
                            float _710 = mad(0.15618768334388733f, _707, mad(0.13400420546531677f, _706, (_705 * 0.6624541878700256f)));
                            float _713 = mad(0.053689517080783844f, _707, mad(0.6740817427635193f, _706, (_705 * 0.2722287178039551f)));
                            float _716 = mad(1.0103391408920288f, _707, mad(0.00406073359772563f, _706, (_705 * -0.005574649665504694f)));
                            float _738 = min(max((min(max(mad(-0.23642469942569733f, _716, mad(-0.32480329275131226f, _713, (_710 * 1.6410233974456787f))), 0.0f), 65535.0f) * ACESMinMaxData.w), 0.0f), 65535.0f);
                            float _739 = min(max((min(max(mad(0.016756348311901093f, _716, mad(1.6153316497802734f, _713, (_710 * -0.663662850856781f))), 0.0f), 65535.0f) * ACESMinMaxData.w), 0.0f), 65535.0f);
                            float _740 = min(max((min(max(mad(0.9883948564529419f, _716, mad(-0.008284442126750946f, _713, (_710 * 0.011721894145011902f))), 0.0f), 65535.0f) * ACESMinMaxData.w), 0.0f), 65535.0f);
                            float _759 = exp2(log2(mad(_68, _740, mad(_67, _739, (_738 * _66))) * 9.999999747378752e-05f) * 0.1593017578125f);
                            float _760 = exp2(log2(mad(_71, _740, mad(_70, _739, (_738 * _69))) * 9.999999747378752e-05f) * 0.1593017578125f);
                            float _761 = exp2(log2(mad(_74, _740, mad(_73, _739, (_738 * _72))) * 9.999999747378752e-05f) * 0.1593017578125f);
                            _2737 = exp2(log2((1.0f / ((_759 * 18.6875f) + 1.0f)) * ((_759 * 18.8515625f) + 0.8359375f)) * 78.84375f);
                            _2738 = exp2(log2((1.0f / ((_760 * 18.6875f) + 1.0f)) * ((_760 * 18.8515625f) + 0.8359375f)) * 78.84375f);
                            _2739 = exp2(log2((1.0f / ((_761 * 18.6875f) + 1.0f)) * ((_761 * 18.8515625f) + 0.8359375f)) * 78.84375f);
                          } while (false);
                        } while (false);
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } else {
              if ((uint)(OutputDevice) == 4) {
                _14[0] = ACESCoefsLow_0.x;
                _14[1] = ACESCoefsLow_0.y;
                _14[2] = ACESCoefsLow_0.z;
                _14[3] = ACESCoefsLow_0.w;
                _14[4] = ACESCoefsLow_4;
                _14[5] = ACESCoefsLow_4;
                _15[0] = ACESCoefsHigh_0.x;
                _15[1] = ACESCoefsHigh_0.y;
                _15[2] = ACESCoefsHigh_0.z;
                _15[3] = ACESCoefsHigh_0.w;
                _15[4] = ACESCoefsHigh_4;
                _15[5] = ACESCoefsHigh_4;
                float _837 = ACESSceneColorMultiplier * _86;
                float _838 = ACESSceneColorMultiplier * _87;
                float _839 = ACESSceneColorMultiplier * _88;
                float _842 = mad((WorkingColorSpace_ToAP0[0].z), _839, mad((WorkingColorSpace_ToAP0[0].y), _838, ((WorkingColorSpace_ToAP0[0].x) * _837)));
                float _845 = mad((WorkingColorSpace_ToAP0[1].z), _839, mad((WorkingColorSpace_ToAP0[1].y), _838, ((WorkingColorSpace_ToAP0[1].x) * _837)));
                float _848 = mad((WorkingColorSpace_ToAP0[2].z), _839, mad((WorkingColorSpace_ToAP0[2].y), _838, ((WorkingColorSpace_ToAP0[2].x) * _837)));
                float _852 = max(max(_842, _845), _848);
                float _857 = (max(_852, 1.000000013351432e-10f) - max(min(min(_842, _845), _848), 1.000000013351432e-10f)) / max(_852, 0.009999999776482582f);
                float _870 = ((_845 + _842) + _848) + (sqrt((((_848 - _845) * _848) + ((_845 - _842) * _845)) + ((_842 - _848) * _842)) * 1.75f);
                float _871 = _870 * 0.3333333432674408f;
                float _872 = _857 + -0.4000000059604645f;
                float _873 = _872 * 5.0f;
                float _877 = max((1.0f - abs(_872 * 2.5f)), 0.0f);
                float _888 = ((float(((int)(uint)((bool)(_873 > 0.0f))) - ((int)(uint)((bool)(_873 < 0.0f)))) * (1.0f - (_877 * _877))) + 1.0f) * 0.02500000037252903f;
                do {
                  if (!(_871 <= 0.0533333346247673f)) {
                    if (!(_871 >= 0.1599999964237213f)) {
                      _897 = (((0.23999999463558197f / _870) + -0.5f) * _888);
                    } else {
                      _897 = 0.0f;
                    }
                  } else {
                    _897 = _888;
                  }
                  float _898 = _897 + 1.0f;
                  float _899 = _898 * _842;
                  float _900 = _898 * _845;
                  float _901 = _898 * _848;
                  do {
                    if (!((bool)(_899 == _900) && (bool)(_900 == _901))) {
                      float _908 = ((_899 * 2.0f) - _900) - _901;
                      float _911 = ((_845 - _848) * 1.7320507764816284f) * _898;
                      float _913 = atan(_911 / _908);
                      bool _916 = (_908 < 0.0f);
                      bool _917 = (_908 == 0.0f);
                      bool _918 = (_911 >= 0.0f);
                      bool _919 = (_911 < 0.0f);
                      _930 = select((_918 && _917), 90.0f, select((_919 && _917), -90.0f, (select((_919 && _916), (_913 + -3.1415927410125732f), select((_918 && _916), (_913 + 3.1415927410125732f), _913)) * 57.2957763671875f)));
                    } else {
                      _930 = 0.0f;
                    }
                    float _935 = min(max(select((_930 < 0.0f), (_930 + 360.0f), _930), 0.0f), 360.0f);
                    do {
                      if (_935 < -180.0f) {
                        _944 = (_935 + 360.0f);
                      } else {
                        if (_935 > 180.0f) {
                          _944 = (_935 + -360.0f);
                        } else {
                          _944 = _935;
                        }
                      }
                      do {
                        if ((bool)(_944 > -67.5f) && (bool)(_944 < 67.5f)) {
                          float _950 = (_944 + 67.5f) * 0.029629629105329514f;
                          int _951 = int(_950);
                          float _953 = _950 - float(_951);
                          float _954 = _953 * _953;
                          float _955 = _954 * _953;
                          if (_951 == 3) {
                            _983 = (((0.1666666716337204f - (_953 * 0.5f)) + (_954 * 0.5f)) - (_955 * 0.1666666716337204f));
                          } else {
                            if (_951 == 2) {
                              _983 = ((0.6666666865348816f - _954) + (_955 * 0.5f));
                            } else {
                              if (_951 == 1) {
                                _983 = (((_955 * -0.5f) + 0.1666666716337204f) + ((_954 + _953) * 0.5f));
                              } else {
                                _983 = select((_951 == 0), (_955 * 0.1666666716337204f), 0.0f);
                              }
                            }
                          }
                        } else {
                          _983 = 0.0f;
                        }
                        float _992 = min(max(((((_857 * 0.27000001072883606f) * (0.029999999329447746f - _899)) * _983) + _899), 0.0f), 65535.0f);
                        float _993 = min(max(_900, 0.0f), 65535.0f);
                        float _994 = min(max(_901, 0.0f), 65535.0f);
                        float _1007 = min(max(mad(-0.21492856740951538f, _994, mad(-0.2365107536315918f, _993, (_992 * 1.4514392614364624f))), 0.0f), 65504.0f);
                        float _1008 = min(max(mad(-0.09967592358589172f, _994, mad(1.17622971534729f, _993, (_992 * -0.07655377686023712f))), 0.0f), 65504.0f);
                        float _1009 = min(max(mad(0.9977163076400757f, _994, mad(-0.006032449658960104f, _993, (_992 * 0.008316148072481155f))), 0.0f), 65504.0f);
                        float _1010 = dot(float3(_1007, _1008, _1009), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                        float _1021 = log2(max((lerp(_1010, _1007, 0.9599999785423279f)), 1.000000013351432e-10f));
                        float _1022 = _1021 * 0.3010300099849701f;
                        float _1023 = log2(ACESMinMaxData.x);
                        float _1024 = _1023 * 0.3010300099849701f;
                        do {
                          if (!(!(_1022 <= _1024))) {
                            _1093 = (log2(ACESMinMaxData.y) * 0.3010300099849701f);
                          } else {
                            float _1031 = log2(ACESMidData.x);
                            float _1032 = _1031 * 0.3010300099849701f;
                            if ((bool)(_1022 > _1024) && (bool)(_1022 < _1032)) {
                              float _1040 = ((_1021 - _1023) * 0.9030900001525879f) / ((_1031 - _1023) * 0.3010300099849701f);
                              int _1041 = int(_1040);
                              float _1043 = _1040 - float(_1041);
                              float _1045 = _14[_1041];
                              float _1048 = _14[(_1041 + 1)];
                              float _1053 = _1045 * 0.5f;
                              _1093 = dot(float3((_1043 * _1043), _1043, 1.0f), float3(mad((_14[(_1041 + 2)]), 0.5f, mad(_1048, -1.0f, _1053)), (_1048 - _1045), mad(_1048, 0.5f, _1053)));
                            } else {
                              do {
                                if (!(!(_1022 >= _1032))) {
                                  float _1062 = log2(ACESMinMaxData.z);
                                  if (_1022 < (_1062 * 0.3010300099849701f)) {
                                    float _1070 = ((_1021 - _1031) * 0.9030900001525879f) / ((_1062 - _1031) * 0.3010300099849701f);
                                    int _1071 = int(_1070);
                                    float _1073 = _1070 - float(_1071);
                                    float _1075 = _15[_1071];
                                    float _1078 = _15[(_1071 + 1)];
                                    float _1083 = _1075 * 0.5f;
                                    _1093 = dot(float3((_1073 * _1073), _1073, 1.0f), float3(mad((_15[(_1071 + 2)]), 0.5f, mad(_1078, -1.0f, _1083)), (_1078 - _1075), mad(_1078, 0.5f, _1083)));
                                    break;
                                  }
                                }
                                _1093 = (log2(ACESMinMaxData.w) * 0.3010300099849701f);
                              } while (false);
                            }
                          }
                          float _1097 = log2(max((lerp(_1010, _1008, 0.9599999785423279f)), 1.000000013351432e-10f));
                          float _1098 = _1097 * 0.3010300099849701f;
                          do {
                            if (!(!(_1098 <= _1024))) {
                              _1167 = (log2(ACESMinMaxData.y) * 0.3010300099849701f);
                            } else {
                              float _1105 = log2(ACESMidData.x);
                              float _1106 = _1105 * 0.3010300099849701f;
                              if ((bool)(_1098 > _1024) && (bool)(_1098 < _1106)) {
                                float _1114 = ((_1097 - _1023) * 0.9030900001525879f) / ((_1105 - _1023) * 0.3010300099849701f);
                                int _1115 = int(_1114);
                                float _1117 = _1114 - float(_1115);
                                float _1119 = _14[_1115];
                                float _1122 = _14[(_1115 + 1)];
                                float _1127 = _1119 * 0.5f;
                                _1167 = dot(float3((_1117 * _1117), _1117, 1.0f), float3(mad((_14[(_1115 + 2)]), 0.5f, mad(_1122, -1.0f, _1127)), (_1122 - _1119), mad(_1122, 0.5f, _1127)));
                              } else {
                                do {
                                  if (!(!(_1098 >= _1106))) {
                                    float _1136 = log2(ACESMinMaxData.z);
                                    if (_1098 < (_1136 * 0.3010300099849701f)) {
                                      float _1144 = ((_1097 - _1105) * 0.9030900001525879f) / ((_1136 - _1105) * 0.3010300099849701f);
                                      int _1145 = int(_1144);
                                      float _1147 = _1144 - float(_1145);
                                      float _1149 = _15[_1145];
                                      float _1152 = _15[(_1145 + 1)];
                                      float _1157 = _1149 * 0.5f;
                                      _1167 = dot(float3((_1147 * _1147), _1147, 1.0f), float3(mad((_15[(_1145 + 2)]), 0.5f, mad(_1152, -1.0f, _1157)), (_1152 - _1149), mad(_1152, 0.5f, _1157)));
                                      break;
                                    }
                                  }
                                  _1167 = (log2(ACESMinMaxData.w) * 0.3010300099849701f);
                                } while (false);
                              }
                            }
                            float _1171 = log2(max((lerp(_1010, _1009, 0.9599999785423279f)), 1.000000013351432e-10f));
                            float _1172 = _1171 * 0.3010300099849701f;
                            do {
                              if (!(!(_1172 <= _1024))) {
                                _1241 = (log2(ACESMinMaxData.y) * 0.3010300099849701f);
                              } else {
                                float _1179 = log2(ACESMidData.x);
                                float _1180 = _1179 * 0.3010300099849701f;
                                if ((bool)(_1172 > _1024) && (bool)(_1172 < _1180)) {
                                  float _1188 = ((_1171 - _1023) * 0.9030900001525879f) / ((_1179 - _1023) * 0.3010300099849701f);
                                  int _1189 = int(_1188);
                                  float _1191 = _1188 - float(_1189);
                                  float _1193 = _14[_1189];
                                  float _1196 = _14[(_1189 + 1)];
                                  float _1201 = _1193 * 0.5f;
                                  _1241 = dot(float3((_1191 * _1191), _1191, 1.0f), float3(mad((_14[(_1189 + 2)]), 0.5f, mad(_1196, -1.0f, _1201)), (_1196 - _1193), mad(_1196, 0.5f, _1201)));
                                } else {
                                  do {
                                    if (!(!(_1172 >= _1180))) {
                                      float _1210 = log2(ACESMinMaxData.z);
                                      if (_1172 < (_1210 * 0.3010300099849701f)) {
                                        float _1218 = ((_1171 - _1179) * 0.9030900001525879f) / ((_1210 - _1179) * 0.3010300099849701f);
                                        int _1219 = int(_1218);
                                        float _1221 = _1218 - float(_1219);
                                        float _1223 = _15[_1219];
                                        float _1226 = _15[(_1219 + 1)];
                                        float _1231 = _1223 * 0.5f;
                                        _1241 = dot(float3((_1221 * _1221), _1221, 1.0f), float3(mad((_15[(_1219 + 2)]), 0.5f, mad(_1226, -1.0f, _1231)), (_1226 - _1223), mad(_1226, 0.5f, _1231)));
                                        break;
                                      }
                                    }
                                    _1241 = (log2(ACESMinMaxData.w) * 0.3010300099849701f);
                                  } while (false);
                                }
                              }
                              float _1245 = ACESMinMaxData.w - ACESMinMaxData.y;
                              float _1246 = (exp2(_1093 * 3.321928024291992f) - ACESMinMaxData.y) / _1245;
                              float _1248 = (exp2(_1167 * 3.321928024291992f) - ACESMinMaxData.y) / _1245;
                              float _1250 = (exp2(_1241 * 3.321928024291992f) - ACESMinMaxData.y) / _1245;
                              float _1253 = mad(0.15618768334388733f, _1250, mad(0.13400420546531677f, _1248, (_1246 * 0.6624541878700256f)));
                              float _1256 = mad(0.053689517080783844f, _1250, mad(0.6740817427635193f, _1248, (_1246 * 0.2722287178039551f)));
                              float _1259 = mad(1.0103391408920288f, _1250, mad(0.00406073359772563f, _1248, (_1246 * -0.005574649665504694f)));
                              float _1272 = min(max(mad(-0.23642469942569733f, _1259, mad(-0.32480329275131226f, _1256, (_1253 * 1.6410233974456787f))), 0.0f), 1.0f);
                              float _1273 = min(max(mad(0.016756348311901093f, _1259, mad(1.6153316497802734f, _1256, (_1253 * -0.663662850856781f))), 0.0f), 1.0f);
                              float _1274 = min(max(mad(0.9883948564529419f, _1259, mad(-0.008284442126750946f, _1256, (_1253 * 0.011721894145011902f))), 0.0f), 1.0f);
                              float _1277 = mad(0.15618768334388733f, _1274, mad(0.13400420546531677f, _1273, (_1272 * 0.6624541878700256f)));
                              float _1280 = mad(0.053689517080783844f, _1274, mad(0.6740817427635193f, _1273, (_1272 * 0.2722287178039551f)));
                              float _1283 = mad(1.0103391408920288f, _1274, mad(0.00406073359772563f, _1273, (_1272 * -0.005574649665504694f)));
                              float _1305 = min(max((min(max(mad(-0.23642469942569733f, _1283, mad(-0.32480329275131226f, _1280, (_1277 * 1.6410233974456787f))), 0.0f), 65535.0f) * ACESMinMaxData.w), 0.0f), 65535.0f);
                              float _1306 = min(max((min(max(mad(0.016756348311901093f, _1283, mad(1.6153316497802734f, _1280, (_1277 * -0.663662850856781f))), 0.0f), 65535.0f) * ACESMinMaxData.w), 0.0f), 65535.0f);
                              float _1307 = min(max((min(max(mad(0.9883948564529419f, _1283, mad(-0.008284442126750946f, _1280, (_1277 * 0.011721894145011902f))), 0.0f), 65535.0f) * ACESMinMaxData.w), 0.0f), 65535.0f);
                              float _1326 = exp2(log2(mad(_68, _1307, mad(_67, _1306, (_1305 * _66))) * 9.999999747378752e-05f) * 0.1593017578125f);
                              float _1327 = exp2(log2(mad(_71, _1307, mad(_70, _1306, (_1305 * _69))) * 9.999999747378752e-05f) * 0.1593017578125f);
                              float _1328 = exp2(log2(mad(_74, _1307, mad(_73, _1306, (_1305 * _72))) * 9.999999747378752e-05f) * 0.1593017578125f);
                              _2737 = exp2(log2((1.0f / ((_1326 * 18.6875f) + 1.0f)) * ((_1326 * 18.8515625f) + 0.8359375f)) * 78.84375f);
                              _2738 = exp2(log2((1.0f / ((_1327 * 18.6875f) + 1.0f)) * ((_1327 * 18.8515625f) + 0.8359375f)) * 78.84375f);
                              _2739 = exp2(log2((1.0f / ((_1328 * 18.6875f) + 1.0f)) * ((_1328 * 18.8515625f) + 0.8359375f)) * 78.84375f);
                            } while (false);
                          } while (false);
                        } while (false);
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } else {
                if ((uint)(OutputDevice) == 5) {
                  _12[0] = ACESCoefsLow_0.x;
                  _12[1] = ACESCoefsLow_0.y;
                  _12[2] = ACESCoefsLow_0.z;
                  _12[3] = ACESCoefsLow_0.w;
                  _12[4] = ACESCoefsLow_4;
                  _12[5] = ACESCoefsLow_4;
                  _13[0] = ACESCoefsHigh_0.x;
                  _13[1] = ACESCoefsHigh_0.y;
                  _13[2] = ACESCoefsHigh_0.z;
                  _13[3] = ACESCoefsHigh_0.w;
                  _13[4] = ACESCoefsHigh_4;
                  _13[5] = ACESCoefsHigh_4;
                  float _1404 = ACESSceneColorMultiplier * _86;
                  float _1405 = ACESSceneColorMultiplier * _87;
                  float _1406 = ACESSceneColorMultiplier * _88;
                  float _1409 = mad((WorkingColorSpace_ToAP0[0].z), _1406, mad((WorkingColorSpace_ToAP0[0].y), _1405, ((WorkingColorSpace_ToAP0[0].x) * _1404)));
                  float _1412 = mad((WorkingColorSpace_ToAP0[1].z), _1406, mad((WorkingColorSpace_ToAP0[1].y), _1405, ((WorkingColorSpace_ToAP0[1].x) * _1404)));
                  float _1415 = mad((WorkingColorSpace_ToAP0[2].z), _1406, mad((WorkingColorSpace_ToAP0[2].y), _1405, ((WorkingColorSpace_ToAP0[2].x) * _1404)));
                  float _1419 = max(max(_1409, _1412), _1415);
                  float _1424 = (max(_1419, 1.000000013351432e-10f) - max(min(min(_1409, _1412), _1415), 1.000000013351432e-10f)) / max(_1419, 0.009999999776482582f);
                  float _1437 = ((_1412 + _1409) + _1415) + (sqrt((((_1415 - _1412) * _1415) + ((_1412 - _1409) * _1412)) + ((_1409 - _1415) * _1409)) * 1.75f);
                  float _1438 = _1437 * 0.3333333432674408f;
                  float _1439 = _1424 + -0.4000000059604645f;
                  float _1440 = _1439 * 5.0f;
                  float _1444 = max((1.0f - abs(_1439 * 2.5f)), 0.0f);
                  float _1455 = ((float(((int)(uint)((bool)(_1440 > 0.0f))) - ((int)(uint)((bool)(_1440 < 0.0f)))) * (1.0f - (_1444 * _1444))) + 1.0f) * 0.02500000037252903f;
                  do {
                    if (!(_1438 <= 0.0533333346247673f)) {
                      if (!(_1438 >= 0.1599999964237213f)) {
                        _1464 = (((0.23999999463558197f / _1437) + -0.5f) * _1455);
                      } else {
                        _1464 = 0.0f;
                      }
                    } else {
                      _1464 = _1455;
                    }
                    float _1465 = _1464 + 1.0f;
                    float _1466 = _1465 * _1409;
                    float _1467 = _1465 * _1412;
                    float _1468 = _1465 * _1415;
                    do {
                      if (!((bool)(_1466 == _1467) && (bool)(_1467 == _1468))) {
                        float _1475 = ((_1466 * 2.0f) - _1467) - _1468;
                        float _1478 = ((_1412 - _1415) * 1.7320507764816284f) * _1465;
                        float _1480 = atan(_1478 / _1475);
                        bool _1483 = (_1475 < 0.0f);
                        bool _1484 = (_1475 == 0.0f);
                        bool _1485 = (_1478 >= 0.0f);
                        bool _1486 = (_1478 < 0.0f);
                        _1497 = select((_1485 && _1484), 90.0f, select((_1486 && _1484), -90.0f, (select((_1486 && _1483), (_1480 + -3.1415927410125732f), select((_1485 && _1483), (_1480 + 3.1415927410125732f), _1480)) * 57.2957763671875f)));
                      } else {
                        _1497 = 0.0f;
                      }
                      float _1502 = min(max(select((_1497 < 0.0f), (_1497 + 360.0f), _1497), 0.0f), 360.0f);
                      do {
                        if (_1502 < -180.0f) {
                          _1511 = (_1502 + 360.0f);
                        } else {
                          if (_1502 > 180.0f) {
                            _1511 = (_1502 + -360.0f);
                          } else {
                            _1511 = _1502;
                          }
                        }
                        do {
                          if ((bool)(_1511 > -67.5f) && (bool)(_1511 < 67.5f)) {
                            float _1517 = (_1511 + 67.5f) * 0.029629629105329514f;
                            int _1518 = int(_1517);
                            float _1520 = _1517 - float(_1518);
                            float _1521 = _1520 * _1520;
                            float _1522 = _1521 * _1520;
                            if (_1518 == 3) {
                              _1550 = (((0.1666666716337204f - (_1520 * 0.5f)) + (_1521 * 0.5f)) - (_1522 * 0.1666666716337204f));
                            } else {
                              if (_1518 == 2) {
                                _1550 = ((0.6666666865348816f - _1521) + (_1522 * 0.5f));
                              } else {
                                if (_1518 == 1) {
                                  _1550 = (((_1522 * -0.5f) + 0.1666666716337204f) + ((_1521 + _1520) * 0.5f));
                                } else {
                                  _1550 = select((_1518 == 0), (_1522 * 0.1666666716337204f), 0.0f);
                                }
                              }
                            }
                          } else {
                            _1550 = 0.0f;
                          }
                          float _1559 = min(max(((((_1424 * 0.27000001072883606f) * (0.029999999329447746f - _1466)) * _1550) + _1466), 0.0f), 65535.0f);
                          float _1560 = min(max(_1467, 0.0f), 65535.0f);
                          float _1561 = min(max(_1468, 0.0f), 65535.0f);
                          float _1574 = min(max(mad(-0.21492856740951538f, _1561, mad(-0.2365107536315918f, _1560, (_1559 * 1.4514392614364624f))), 0.0f), 65504.0f);
                          float _1575 = min(max(mad(-0.09967592358589172f, _1561, mad(1.17622971534729f, _1560, (_1559 * -0.07655377686023712f))), 0.0f), 65504.0f);
                          float _1576 = min(max(mad(0.9977163076400757f, _1561, mad(-0.006032449658960104f, _1560, (_1559 * 0.008316148072481155f))), 0.0f), 65504.0f);
                          float _1577 = dot(float3(_1574, _1575, _1576), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                          float _1588 = log2(max((lerp(_1577, _1574, 0.9599999785423279f)), 1.000000013351432e-10f));
                          float _1589 = _1588 * 0.3010300099849701f;
                          float _1590 = log2(ACESMinMaxData.x);
                          float _1591 = _1590 * 0.3010300099849701f;
                          do {
                            if (!(!(_1589 <= _1591))) {
                              _1660 = (log2(ACESMinMaxData.y) * 0.3010300099849701f);
                            } else {
                              float _1598 = log2(ACESMidData.x);
                              float _1599 = _1598 * 0.3010300099849701f;
                              if ((bool)(_1589 > _1591) && (bool)(_1589 < _1599)) {
                                float _1607 = ((_1588 - _1590) * 0.9030900001525879f) / ((_1598 - _1590) * 0.3010300099849701f);
                                int _1608 = int(_1607);
                                float _1610 = _1607 - float(_1608);
                                float _1612 = _12[_1608];
                                float _1615 = _12[(_1608 + 1)];
                                float _1620 = _1612 * 0.5f;
                                _1660 = dot(float3((_1610 * _1610), _1610, 1.0f), float3(mad((_12[(_1608 + 2)]), 0.5f, mad(_1615, -1.0f, _1620)), (_1615 - _1612), mad(_1615, 0.5f, _1620)));
                              } else {
                                do {
                                  if (!(!(_1589 >= _1599))) {
                                    float _1629 = log2(ACESMinMaxData.z);
                                    if (_1589 < (_1629 * 0.3010300099849701f)) {
                                      float _1637 = ((_1588 - _1598) * 0.9030900001525879f) / ((_1629 - _1598) * 0.3010300099849701f);
                                      int _1638 = int(_1637);
                                      float _1640 = _1637 - float(_1638);
                                      float _1642 = _13[_1638];
                                      float _1645 = _13[(_1638 + 1)];
                                      float _1650 = _1642 * 0.5f;
                                      _1660 = dot(float3((_1640 * _1640), _1640, 1.0f), float3(mad((_13[(_1638 + 2)]), 0.5f, mad(_1645, -1.0f, _1650)), (_1645 - _1642), mad(_1645, 0.5f, _1650)));
                                      break;
                                    }
                                  }
                                  _1660 = (log2(ACESMinMaxData.w) * 0.3010300099849701f);
                                } while (false);
                              }
                            }
                            float _1664 = log2(max((lerp(_1577, _1575, 0.9599999785423279f)), 1.000000013351432e-10f));
                            float _1665 = _1664 * 0.3010300099849701f;
                            do {
                              if (!(!(_1665 <= _1591))) {
                                _1734 = (log2(ACESMinMaxData.y) * 0.3010300099849701f);
                              } else {
                                float _1672 = log2(ACESMidData.x);
                                float _1673 = _1672 * 0.3010300099849701f;
                                if ((bool)(_1665 > _1591) && (bool)(_1665 < _1673)) {
                                  float _1681 = ((_1664 - _1590) * 0.9030900001525879f) / ((_1672 - _1590) * 0.3010300099849701f);
                                  int _1682 = int(_1681);
                                  float _1684 = _1681 - float(_1682);
                                  float _1686 = _12[_1682];
                                  float _1689 = _12[(_1682 + 1)];
                                  float _1694 = _1686 * 0.5f;
                                  _1734 = dot(float3((_1684 * _1684), _1684, 1.0f), float3(mad((_12[(_1682 + 2)]), 0.5f, mad(_1689, -1.0f, _1694)), (_1689 - _1686), mad(_1689, 0.5f, _1694)));
                                } else {
                                  do {
                                    if (!(!(_1665 >= _1673))) {
                                      float _1703 = log2(ACESMinMaxData.z);
                                      if (_1665 < (_1703 * 0.3010300099849701f)) {
                                        float _1711 = ((_1664 - _1672) * 0.9030900001525879f) / ((_1703 - _1672) * 0.3010300099849701f);
                                        int _1712 = int(_1711);
                                        float _1714 = _1711 - float(_1712);
                                        float _1716 = _13[_1712];
                                        float _1719 = _13[(_1712 + 1)];
                                        float _1724 = _1716 * 0.5f;
                                        _1734 = dot(float3((_1714 * _1714), _1714, 1.0f), float3(mad((_13[(_1712 + 2)]), 0.5f, mad(_1719, -1.0f, _1724)), (_1719 - _1716), mad(_1719, 0.5f, _1724)));
                                        break;
                                      }
                                    }
                                    _1734 = (log2(ACESMinMaxData.w) * 0.3010300099849701f);
                                  } while (false);
                                }
                              }
                              float _1738 = log2(max((lerp(_1577, _1576, 0.9599999785423279f)), 1.000000013351432e-10f));
                              float _1739 = _1738 * 0.3010300099849701f;
                              do {
                                if (!(!(_1739 <= _1591))) {
                                  _1808 = (log2(ACESMinMaxData.y) * 0.3010300099849701f);
                                } else {
                                  float _1746 = log2(ACESMidData.x);
                                  float _1747 = _1746 * 0.3010300099849701f;
                                  if ((bool)(_1739 > _1591) && (bool)(_1739 < _1747)) {
                                    float _1755 = ((_1738 - _1590) * 0.9030900001525879f) / ((_1746 - _1590) * 0.3010300099849701f);
                                    int _1756 = int(_1755);
                                    float _1758 = _1755 - float(_1756);
                                    float _1760 = _12[_1756];
                                    float _1763 = _12[(_1756 + 1)];
                                    float _1768 = _1760 * 0.5f;
                                    _1808 = dot(float3((_1758 * _1758), _1758, 1.0f), float3(mad((_12[(_1756 + 2)]), 0.5f, mad(_1763, -1.0f, _1768)), (_1763 - _1760), mad(_1763, 0.5f, _1768)));
                                  } else {
                                    do {
                                      if (!(!(_1739 >= _1747))) {
                                        float _1777 = log2(ACESMinMaxData.z);
                                        if (_1739 < (_1777 * 0.3010300099849701f)) {
                                          float _1785 = ((_1738 - _1746) * 0.9030900001525879f) / ((_1777 - _1746) * 0.3010300099849701f);
                                          int _1786 = int(_1785);
                                          float _1788 = _1785 - float(_1786);
                                          float _1790 = _13[_1786];
                                          float _1793 = _13[(_1786 + 1)];
                                          float _1798 = _1790 * 0.5f;
                                          _1808 = dot(float3((_1788 * _1788), _1788, 1.0f), float3(mad((_13[(_1786 + 2)]), 0.5f, mad(_1793, -1.0f, _1798)), (_1793 - _1790), mad(_1793, 0.5f, _1798)));
                                          break;
                                        }
                                      }
                                      _1808 = (log2(ACESMinMaxData.w) * 0.3010300099849701f);
                                    } while (false);
                                  }
                                }
                                float _1812 = ACESMinMaxData.w - ACESMinMaxData.y;
                                float _1813 = (exp2(_1660 * 3.321928024291992f) - ACESMinMaxData.y) / _1812;
                                float _1815 = (exp2(_1734 * 3.321928024291992f) - ACESMinMaxData.y) / _1812;
                                float _1817 = (exp2(_1808 * 3.321928024291992f) - ACESMinMaxData.y) / _1812;
                                float _1820 = mad(0.15618768334388733f, _1817, mad(0.13400420546531677f, _1815, (_1813 * 0.6624541878700256f)));
                                float _1823 = mad(0.053689517080783844f, _1817, mad(0.6740817427635193f, _1815, (_1813 * 0.2722287178039551f)));
                                float _1826 = mad(1.0103391408920288f, _1817, mad(0.00406073359772563f, _1815, (_1813 * -0.005574649665504694f)));
                                float _1839 = min(max(mad(-0.23642469942569733f, _1826, mad(-0.32480329275131226f, _1823, (_1820 * 1.6410233974456787f))), 0.0f), 1.0f);
                                float _1840 = min(max(mad(0.016756348311901093f, _1826, mad(1.6153316497802734f, _1823, (_1820 * -0.663662850856781f))), 0.0f), 1.0f);
                                float _1841 = min(max(mad(0.9883948564529419f, _1826, mad(-0.008284442126750946f, _1823, (_1820 * 0.011721894145011902f))), 0.0f), 1.0f);
                                float _1844 = mad(0.15618768334388733f, _1841, mad(0.13400420546531677f, _1840, (_1839 * 0.6624541878700256f)));
                                float _1847 = mad(0.053689517080783844f, _1841, mad(0.6740817427635193f, _1840, (_1839 * 0.2722287178039551f)));
                                float _1850 = mad(1.0103391408920288f, _1841, mad(0.00406073359772563f, _1840, (_1839 * -0.005574649665504694f)));
                                float _1886 = exp2(log2(min(max((min(max(mad(-0.23642469942569733f, _1850, mad(-0.32480329275131226f, _1847, (_1844 * 1.6410233974456787f))), 0.0f), 65535.0f) * ACESMinMaxData.w), 0.0f), 65535.0f) * 9.999999747378752e-05f) * 0.1593017578125f);
                                float _1887 = exp2(log2(min(max((min(max(mad(0.016756348311901093f, _1850, mad(1.6153316497802734f, _1847, (_1844 * -0.663662850856781f))), 0.0f), 65535.0f) * ACESMinMaxData.w), 0.0f), 65535.0f) * 9.999999747378752e-05f) * 0.1593017578125f);
                                float _1888 = exp2(log2(min(max((min(max(mad(0.9883948564529419f, _1850, mad(-0.008284442126750946f, _1847, (_1844 * 0.011721894145011902f))), 0.0f), 65535.0f) * ACESMinMaxData.w), 0.0f), 65535.0f) * 9.999999747378752e-05f) * 0.1593017578125f);
                                float _1922 = exp2(log2(exp2(log2((1.0f / ((_1886 * 18.6875f) + 1.0f)) * ((_1886 * 18.8515625f) + 0.8359375f)) * 78.84375f)) * 0.012683313339948654f);
                                float _1923 = exp2(log2(exp2(log2((1.0f / ((_1887 * 18.6875f) + 1.0f)) * ((_1887 * 18.8515625f) + 0.8359375f)) * 78.84375f)) * 0.012683313339948654f);
                                float _1924 = exp2(log2(exp2(log2((1.0f / ((_1888 * 18.6875f) + 1.0f)) * ((_1888 * 18.8515625f) + 0.8359375f)) * 78.84375f)) * 0.012683313339948654f);
                                float _1959 = OutputMaxLuminance + -9.999999747378752e-05f;
                                float _1960 = (min(max((exp2(log2(max(0.0f, (_1922 + -0.8359375f)) / (18.8515625f - (_1922 * 18.6875f))) * 6.277394771575928f) * 10000.0f), 9.999999747378752e-05f), OutputMaxLuminance) + -9.999999747378752e-05f) / _1959;
                                float _1962 = (min(max((exp2(log2(max(0.0f, (_1923 + -0.8359375f)) / (18.8515625f - (_1923 * 18.6875f))) * 6.277394771575928f) * 10000.0f), 9.999999747378752e-05f), OutputMaxLuminance) + -9.999999747378752e-05f) / _1959;
                                float _1964 = (min(max((exp2(log2(max(0.0f, (_1924 + -0.8359375f)) / (18.8515625f - (_1924 * 18.6875f))) * 6.277394771575928f) * 10000.0f), 9.999999747378752e-05f), OutputMaxLuminance) + -9.999999747378752e-05f) / _1959;
                                float _1965 = OutputMaxLuminance * 0.012500000186264515f;
                                _2737 = (mad(-0.0832589864730835f, _1964, mad(-0.6217921376228333f, _1962, (_1960 * 1.705051064491272f))) * _1965);
                                _2738 = (mad(-0.010548308491706848f, _1964, mad(1.140804648399353f, _1962, (_1960 * -0.13025647401809692f))) * _1965);
                                _2739 = (mad(1.1529725790023804f, _1964, mad(-0.1289689838886261f, _1962, (_1960 * -0.024003351107239723f))) * _1965);
                              } while (false);
                            } while (false);
                          } while (false);
                        } while (false);
                      } while (false);
                    } while (false);
                  } while (false);
                } else {
                  if ((uint)(OutputDevice) == 6) {
                    _10[0] = ACESCoefsLow_0.x;
                    _10[1] = ACESCoefsLow_0.y;
                    _10[2] = ACESCoefsLow_0.z;
                    _10[3] = ACESCoefsLow_0.w;
                    _10[4] = ACESCoefsLow_4;
                    _10[5] = ACESCoefsLow_4;
                    _11[0] = ACESCoefsHigh_0.x;
                    _11[1] = ACESCoefsHigh_0.y;
                    _11[2] = ACESCoefsHigh_0.z;
                    _11[3] = ACESCoefsHigh_0.w;
                    _11[4] = ACESCoefsHigh_4;
                    _11[5] = ACESCoefsHigh_4;
                    float _2026 = ACESSceneColorMultiplier * _86;
                    float _2027 = ACESSceneColorMultiplier * _87;
                    float _2028 = ACESSceneColorMultiplier * _88;
                    float _2031 = mad((WorkingColorSpace_ToAP0[0].z), _2028, mad((WorkingColorSpace_ToAP0[0].y), _2027, ((WorkingColorSpace_ToAP0[0].x) * _2026)));
                    float _2034 = mad((WorkingColorSpace_ToAP0[1].z), _2028, mad((WorkingColorSpace_ToAP0[1].y), _2027, ((WorkingColorSpace_ToAP0[1].x) * _2026)));
                    float _2037 = mad((WorkingColorSpace_ToAP0[2].z), _2028, mad((WorkingColorSpace_ToAP0[2].y), _2027, ((WorkingColorSpace_ToAP0[2].x) * _2026)));
                    float _2041 = max(max(_2031, _2034), _2037);
                    float _2046 = (max(_2041, 1.000000013351432e-10f) - max(min(min(_2031, _2034), _2037), 1.000000013351432e-10f)) / max(_2041, 0.009999999776482582f);
                    float _2059 = ((_2034 + _2031) + _2037) + (sqrt((((_2037 - _2034) * _2037) + ((_2034 - _2031) * _2034)) + ((_2031 - _2037) * _2031)) * 1.75f);
                    float _2060 = _2059 * 0.3333333432674408f;
                    float _2061 = _2046 + -0.4000000059604645f;
                    float _2062 = _2061 * 5.0f;
                    float _2066 = max((1.0f - abs(_2061 * 2.5f)), 0.0f);
                    float _2077 = ((float(((int)(uint)((bool)(_2062 > 0.0f))) - ((int)(uint)((bool)(_2062 < 0.0f)))) * (1.0f - (_2066 * _2066))) + 1.0f) * 0.02500000037252903f;
                    do {
                      if (!(_2060 <= 0.0533333346247673f)) {
                        if (!(_2060 >= 0.1599999964237213f)) {
                          _2086 = (((0.23999999463558197f / _2059) + -0.5f) * _2077);
                        } else {
                          _2086 = 0.0f;
                        }
                      } else {
                        _2086 = _2077;
                      }
                      float _2087 = _2086 + 1.0f;
                      float _2088 = _2087 * _2031;
                      float _2089 = _2087 * _2034;
                      float _2090 = _2087 * _2037;
                      do {
                        if (!((bool)(_2088 == _2089) && (bool)(_2089 == _2090))) {
                          float _2097 = ((_2088 * 2.0f) - _2089) - _2090;
                          float _2100 = ((_2034 - _2037) * 1.7320507764816284f) * _2087;
                          float _2102 = atan(_2100 / _2097);
                          bool _2105 = (_2097 < 0.0f);
                          bool _2106 = (_2097 == 0.0f);
                          bool _2107 = (_2100 >= 0.0f);
                          bool _2108 = (_2100 < 0.0f);
                          _2119 = select((_2107 && _2106), 90.0f, select((_2108 && _2106), -90.0f, (select((_2108 && _2105), (_2102 + -3.1415927410125732f), select((_2107 && _2105), (_2102 + 3.1415927410125732f), _2102)) * 57.2957763671875f)));
                        } else {
                          _2119 = 0.0f;
                        }
                        float _2124 = min(max(select((_2119 < 0.0f), (_2119 + 360.0f), _2119), 0.0f), 360.0f);
                        do {
                          if (_2124 < -180.0f) {
                            _2133 = (_2124 + 360.0f);
                          } else {
                            if (_2124 > 180.0f) {
                              _2133 = (_2124 + -360.0f);
                            } else {
                              _2133 = _2124;
                            }
                          }
                          do {
                            if ((bool)(_2133 > -67.5f) && (bool)(_2133 < 67.5f)) {
                              float _2139 = (_2133 + 67.5f) * 0.029629629105329514f;
                              int _2140 = int(_2139);
                              float _2142 = _2139 - float(_2140);
                              float _2143 = _2142 * _2142;
                              float _2144 = _2143 * _2142;
                              if (_2140 == 3) {
                                _2172 = (((0.1666666716337204f - (_2142 * 0.5f)) + (_2143 * 0.5f)) - (_2144 * 0.1666666716337204f));
                              } else {
                                if (_2140 == 2) {
                                  _2172 = ((0.6666666865348816f - _2143) + (_2144 * 0.5f));
                                } else {
                                  if (_2140 == 1) {
                                    _2172 = (((_2144 * -0.5f) + 0.1666666716337204f) + ((_2143 + _2142) * 0.5f));
                                  } else {
                                    _2172 = select((_2140 == 0), (_2144 * 0.1666666716337204f), 0.0f);
                                  }
                                }
                              }
                            } else {
                              _2172 = 0.0f;
                            }
                            float _2181 = min(max(((((_2046 * 0.27000001072883606f) * (0.029999999329447746f - _2088)) * _2172) + _2088), 0.0f), 65535.0f);
                            float _2182 = min(max(_2089, 0.0f), 65535.0f);
                            float _2183 = min(max(_2090, 0.0f), 65535.0f);
                            float _2196 = min(max(mad(-0.21492856740951538f, _2183, mad(-0.2365107536315918f, _2182, (_2181 * 1.4514392614364624f))), 0.0f), 65504.0f);
                            float _2197 = min(max(mad(-0.09967592358589172f, _2183, mad(1.17622971534729f, _2182, (_2181 * -0.07655377686023712f))), 0.0f), 65504.0f);
                            float _2198 = min(max(mad(0.9977163076400757f, _2183, mad(-0.006032449658960104f, _2182, (_2181 * 0.008316148072481155f))), 0.0f), 65504.0f);
                            float _2199 = dot(float3(_2196, _2197, _2198), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                            float _2210 = log2(max((lerp(_2199, _2196, 0.9599999785423279f)), 1.000000013351432e-10f));
                            float _2211 = _2210 * 0.3010300099849701f;
                            float _2212 = log2(ACESMinMaxData.x);
                            float _2213 = _2212 * 0.3010300099849701f;
                            do {
                              if (!(!(_2211 <= _2213))) {
                                _2282 = (log2(ACESMinMaxData.y) * 0.3010300099849701f);
                              } else {
                                float _2220 = log2(ACESMidData.x);
                                float _2221 = _2220 * 0.3010300099849701f;
                                if ((bool)(_2211 > _2213) && (bool)(_2211 < _2221)) {
                                  float _2229 = ((_2210 - _2212) * 0.9030900001525879f) / ((_2220 - _2212) * 0.3010300099849701f);
                                  int _2230 = int(_2229);
                                  float _2232 = _2229 - float(_2230);
                                  float _2234 = _10[_2230];
                                  float _2237 = _10[(_2230 + 1)];
                                  float _2242 = _2234 * 0.5f;
                                  _2282 = dot(float3((_2232 * _2232), _2232, 1.0f), float3(mad((_10[(_2230 + 2)]), 0.5f, mad(_2237, -1.0f, _2242)), (_2237 - _2234), mad(_2237, 0.5f, _2242)));
                                } else {
                                  do {
                                    if (!(!(_2211 >= _2221))) {
                                      float _2251 = log2(ACESMinMaxData.z);
                                      if (_2211 < (_2251 * 0.3010300099849701f)) {
                                        float _2259 = ((_2210 - _2220) * 0.9030900001525879f) / ((_2251 - _2220) * 0.3010300099849701f);
                                        int _2260 = int(_2259);
                                        float _2262 = _2259 - float(_2260);
                                        float _2264 = _11[_2260];
                                        float _2267 = _11[(_2260 + 1)];
                                        float _2272 = _2264 * 0.5f;
                                        _2282 = dot(float3((_2262 * _2262), _2262, 1.0f), float3(mad((_11[(_2260 + 2)]), 0.5f, mad(_2267, -1.0f, _2272)), (_2267 - _2264), mad(_2267, 0.5f, _2272)));
                                        break;
                                      }
                                    }
                                    _2282 = (log2(ACESMinMaxData.w) * 0.3010300099849701f);
                                  } while (false);
                                }
                              }
                              float _2286 = log2(max((lerp(_2199, _2197, 0.9599999785423279f)), 1.000000013351432e-10f));
                              float _2287 = _2286 * 0.3010300099849701f;
                              do {
                                if (!(!(_2287 <= _2213))) {
                                  _2356 = (log2(ACESMinMaxData.y) * 0.3010300099849701f);
                                } else {
                                  float _2294 = log2(ACESMidData.x);
                                  float _2295 = _2294 * 0.3010300099849701f;
                                  if ((bool)(_2287 > _2213) && (bool)(_2287 < _2295)) {
                                    float _2303 = ((_2286 - _2212) * 0.9030900001525879f) / ((_2294 - _2212) * 0.3010300099849701f);
                                    int _2304 = int(_2303);
                                    float _2306 = _2303 - float(_2304);
                                    float _2308 = _10[_2304];
                                    float _2311 = _10[(_2304 + 1)];
                                    float _2316 = _2308 * 0.5f;
                                    _2356 = dot(float3((_2306 * _2306), _2306, 1.0f), float3(mad((_10[(_2304 + 2)]), 0.5f, mad(_2311, -1.0f, _2316)), (_2311 - _2308), mad(_2311, 0.5f, _2316)));
                                  } else {
                                    do {
                                      if (!(!(_2287 >= _2295))) {
                                        float _2325 = log2(ACESMinMaxData.z);
                                        if (_2287 < (_2325 * 0.3010300099849701f)) {
                                          float _2333 = ((_2286 - _2294) * 0.9030900001525879f) / ((_2325 - _2294) * 0.3010300099849701f);
                                          int _2334 = int(_2333);
                                          float _2336 = _2333 - float(_2334);
                                          float _2338 = _11[_2334];
                                          float _2341 = _11[(_2334 + 1)];
                                          float _2346 = _2338 * 0.5f;
                                          _2356 = dot(float3((_2336 * _2336), _2336, 1.0f), float3(mad((_11[(_2334 + 2)]), 0.5f, mad(_2341, -1.0f, _2346)), (_2341 - _2338), mad(_2341, 0.5f, _2346)));
                                          break;
                                        }
                                      }
                                      _2356 = (log2(ACESMinMaxData.w) * 0.3010300099849701f);
                                    } while (false);
                                  }
                                }
                                float _2360 = log2(max((lerp(_2199, _2198, 0.9599999785423279f)), 1.000000013351432e-10f));
                                float _2361 = _2360 * 0.3010300099849701f;
                                do {
                                  if (!(!(_2361 <= _2213))) {
                                    _2430 = (log2(ACESMinMaxData.y) * 0.3010300099849701f);
                                  } else {
                                    float _2368 = log2(ACESMidData.x);
                                    float _2369 = _2368 * 0.3010300099849701f;
                                    if ((bool)(_2361 > _2213) && (bool)(_2361 < _2369)) {
                                      float _2377 = ((_2360 - _2212) * 0.9030900001525879f) / ((_2368 - _2212) * 0.3010300099849701f);
                                      int _2378 = int(_2377);
                                      float _2380 = _2377 - float(_2378);
                                      float _2382 = _10[_2378];
                                      float _2385 = _10[(_2378 + 1)];
                                      float _2390 = _2382 * 0.5f;
                                      _2430 = dot(float3((_2380 * _2380), _2380, 1.0f), float3(mad((_10[(_2378 + 2)]), 0.5f, mad(_2385, -1.0f, _2390)), (_2385 - _2382), mad(_2385, 0.5f, _2390)));
                                    } else {
                                      do {
                                        if (!(!(_2361 >= _2369))) {
                                          float _2399 = log2(ACESMinMaxData.z);
                                          if (_2361 < (_2399 * 0.3010300099849701f)) {
                                            float _2407 = ((_2360 - _2368) * 0.9030900001525879f) / ((_2399 - _2368) * 0.3010300099849701f);
                                            int _2408 = int(_2407);
                                            float _2410 = _2407 - float(_2408);
                                            float _2412 = _11[_2408];
                                            float _2415 = _11[(_2408 + 1)];
                                            float _2420 = _2412 * 0.5f;
                                            _2430 = dot(float3((_2410 * _2410), _2410, 1.0f), float3(mad((_11[(_2408 + 2)]), 0.5f, mad(_2415, -1.0f, _2420)), (_2415 - _2412), mad(_2415, 0.5f, _2420)));
                                            break;
                                          }
                                        }
                                        _2430 = (log2(ACESMinMaxData.w) * 0.3010300099849701f);
                                      } while (false);
                                    }
                                  }
                                  float _2434 = ACESMinMaxData.w - ACESMinMaxData.y;
                                  float _2435 = (exp2(_2282 * 3.321928024291992f) - ACESMinMaxData.y) / _2434;
                                  float _2437 = (exp2(_2356 * 3.321928024291992f) - ACESMinMaxData.y) / _2434;
                                  float _2439 = (exp2(_2430 * 3.321928024291992f) - ACESMinMaxData.y) / _2434;
                                  float _2442 = mad(0.15618768334388733f, _2439, mad(0.13400420546531677f, _2437, (_2435 * 0.6624541878700256f)));
                                  float _2445 = mad(0.053689517080783844f, _2439, mad(0.6740817427635193f, _2437, (_2435 * 0.2722287178039551f)));
                                  float _2448 = mad(1.0103391408920288f, _2439, mad(0.00406073359772563f, _2437, (_2435 * -0.005574649665504694f)));
                                  float _2461 = min(max(mad(-0.23642469942569733f, _2448, mad(-0.32480329275131226f, _2445, (_2442 * 1.6410233974456787f))), 0.0f), 1.0f);
                                  float _2462 = min(max(mad(0.016756348311901093f, _2448, mad(1.6153316497802734f, _2445, (_2442 * -0.663662850856781f))), 0.0f), 1.0f);
                                  float _2463 = min(max(mad(0.9883948564529419f, _2448, mad(-0.008284442126750946f, _2445, (_2442 * 0.011721894145011902f))), 0.0f), 1.0f);
                                  float _2466 = mad(0.15618768334388733f, _2463, mad(0.13400420546531677f, _2462, (_2461 * 0.6624541878700256f)));
                                  float _2469 = mad(0.053689517080783844f, _2463, mad(0.6740817427635193f, _2462, (_2461 * 0.2722287178039551f)));
                                  float _2472 = mad(1.0103391408920288f, _2463, mad(0.00406073359772563f, _2462, (_2461 * -0.005574649665504694f)));
                                  float _2508 = exp2(log2(min(max((min(max(mad(-0.23642469942569733f, _2472, mad(-0.32480329275131226f, _2469, (_2466 * 1.6410233974456787f))), 0.0f), 65535.0f) * ACESMinMaxData.w), 0.0f), 65535.0f) * 9.999999747378752e-05f) * 0.1593017578125f);
                                  float _2509 = exp2(log2(min(max((min(max(mad(0.016756348311901093f, _2472, mad(1.6153316497802734f, _2469, (_2466 * -0.663662850856781f))), 0.0f), 65535.0f) * ACESMinMaxData.w), 0.0f), 65535.0f) * 9.999999747378752e-05f) * 0.1593017578125f);
                                  float _2510 = exp2(log2(min(max((min(max(mad(0.9883948564529419f, _2472, mad(-0.008284442126750946f, _2469, (_2466 * 0.011721894145011902f))), 0.0f), 65535.0f) * ACESMinMaxData.w), 0.0f), 65535.0f) * 9.999999747378752e-05f) * 0.1593017578125f);
                                  float _2544 = exp2(log2(exp2(log2((1.0f / ((_2508 * 18.6875f) + 1.0f)) * ((_2508 * 18.8515625f) + 0.8359375f)) * 78.84375f)) * 0.012683313339948654f);
                                  float _2545 = exp2(log2(exp2(log2((1.0f / ((_2509 * 18.6875f) + 1.0f)) * ((_2509 * 18.8515625f) + 0.8359375f)) * 78.84375f)) * 0.012683313339948654f);
                                  float _2546 = exp2(log2(exp2(log2((1.0f / ((_2510 * 18.6875f) + 1.0f)) * ((_2510 * 18.8515625f) + 0.8359375f)) * 78.84375f)) * 0.012683313339948654f);
                                  float _2581 = OutputMaxLuminance + -9.999999747378752e-05f;
                                  float _2582 = (min(max((exp2(log2(max(0.0f, (_2544 + -0.8359375f)) / (18.8515625f - (_2544 * 18.6875f))) * 6.277394771575928f) * 10000.0f), 9.999999747378752e-05f), OutputMaxLuminance) + -9.999999747378752e-05f) / _2581;
                                  float _2584 = (min(max((exp2(log2(max(0.0f, (_2545 + -0.8359375f)) / (18.8515625f - (_2545 * 18.6875f))) * 6.277394771575928f) * 10000.0f), 9.999999747378752e-05f), OutputMaxLuminance) + -9.999999747378752e-05f) / _2581;
                                  float _2586 = (min(max((exp2(log2(max(0.0f, (_2546 + -0.8359375f)) / (18.8515625f - (_2546 * 18.6875f))) * 6.277394771575928f) * 10000.0f), 9.999999747378752e-05f), OutputMaxLuminance) + -9.999999747378752e-05f) / _2581;
                                  float _2587 = OutputMaxLuminance * 0.012500000186264515f;
                                  _2737 = (mad(-0.0832589864730835f, _2586, mad(-0.6217921376228333f, _2584, (_2582 * 1.705051064491272f))) * _2587);
                                  _2738 = (mad(-0.010548308491706848f, _2586, mad(1.140804648399353f, _2584, (_2582 * -0.13025647401809692f))) * _2587);
                                  _2739 = (mad(1.1529725790023804f, _2586, mad(-0.1289689838886261f, _2584, (_2582 * -0.024003351107239723f))) * _2587);
                                } while (false);
                              } while (false);
                            } while (false);
                          } while (false);
                        } while (false);
                      } while (false);
                    } while (false);
                  } else {
                    if ((uint)(OutputDevice) == 7) {
                      float _2617 = mad((WorkingColorSpace_ToAP1[0].z), _88, mad((WorkingColorSpace_ToAP1[0].y), _87, ((WorkingColorSpace_ToAP1[0].x) * _86)));
                      float _2620 = mad((WorkingColorSpace_ToAP1[1].z), _88, mad((WorkingColorSpace_ToAP1[1].y), _87, ((WorkingColorSpace_ToAP1[1].x) * _86)));
                      float _2623 = mad((WorkingColorSpace_ToAP1[2].z), _88, mad((WorkingColorSpace_ToAP1[2].y), _87, ((WorkingColorSpace_ToAP1[2].x) * _86)));
                      float _2642 = exp2(log2(mad(_68, _2623, mad(_67, _2620, (_2617 * _66))) * 9.999999747378752e-05f) * 0.1593017578125f);
                      float _2643 = exp2(log2(mad(_71, _2623, mad(_70, _2620, (_2617 * _69))) * 9.999999747378752e-05f) * 0.1593017578125f);
                      float _2644 = exp2(log2(mad(_74, _2623, mad(_73, _2620, (_2617 * _72))) * 9.999999747378752e-05f) * 0.1593017578125f);
                      _2737 = exp2(log2((1.0f / ((_2642 * 18.6875f) + 1.0f)) * ((_2642 * 18.8515625f) + 0.8359375f)) * 78.84375f);
                      _2738 = exp2(log2((1.0f / ((_2643 * 18.6875f) + 1.0f)) * ((_2643 * 18.8515625f) + 0.8359375f)) * 78.84375f);
                      _2739 = exp2(log2((1.0f / ((_2644 * 18.6875f) + 1.0f)) * ((_2644 * 18.8515625f) + 0.8359375f)) * 78.84375f);
                    } else {
                      if (!((uint)(OutputDevice) == 8)) {
                        if ((uint)(OutputDevice) == 9) {
                          float _2691 = mad((WorkingColorSpace_ToAP1[0].z), _43.z, mad((WorkingColorSpace_ToAP1[0].y), _43.y, ((WorkingColorSpace_ToAP1[0].x) * _43.x)));
                          float _2694 = mad((WorkingColorSpace_ToAP1[1].z), _43.z, mad((WorkingColorSpace_ToAP1[1].y), _43.y, ((WorkingColorSpace_ToAP1[1].x) * _43.x)));
                          float _2697 = mad((WorkingColorSpace_ToAP1[2].z), _43.z, mad((WorkingColorSpace_ToAP1[2].y), _43.y, ((WorkingColorSpace_ToAP1[2].x) * _43.x)));
                          _2737 = mad(_68, _2697, mad(_67, _2694, (_2691 * _66)));
                          _2738 = mad(_71, _2697, mad(_70, _2694, (_2691 * _69)));
                          _2739 = mad(_74, _2697, mad(_73, _2694, (_2691 * _72)));
                        } else {
                          float _2710 = mad((WorkingColorSpace_ToAP1[0].z), _88, mad((WorkingColorSpace_ToAP1[0].y), _87, ((WorkingColorSpace_ToAP1[0].x) * _86)));
                          float _2713 = mad((WorkingColorSpace_ToAP1[1].z), _88, mad((WorkingColorSpace_ToAP1[1].y), _87, ((WorkingColorSpace_ToAP1[1].x) * _86)));
                          float _2716 = mad((WorkingColorSpace_ToAP1[2].z), _88, mad((WorkingColorSpace_ToAP1[2].y), _87, ((WorkingColorSpace_ToAP1[2].x) * _86)));
                          _2737 = exp2(log2(mad(_68, _2716, mad(_67, _2713, (_2710 * _66)))) * InverseGamma.z);
                          _2738 = exp2(log2(mad(_71, _2716, mad(_70, _2713, (_2710 * _69)))) * InverseGamma.z);
                          _2739 = exp2(log2(mad(_74, _2716, mad(_73, _2713, (_2710 * _72)))) * InverseGamma.z);
                        }
                      } else {
                        _2737 = _86;
                        _2738 = _87;
                        _2739 = _88;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        RWOutputTexture[int2(((uint)(Output_ViewportMin.x + SV_DispatchThreadID.x)), ((uint)(Output_ViewportMin.y + SV_DispatchThreadID.y)))] = float4(_2737, _2738, _2739, 1.0f);
      } while (false);
    } while (false);
  }
}
