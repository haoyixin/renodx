#include "../shared.h"

Texture2D<float4> Filter_Texture : register(t0);

Texture2D<float4> Additive_Texture : register(t1);

RWTexture2D<float4> RWOutputTexture : register(u0);

cbuffer _RootShaderParameters : register(b0) {
  float2 Filter_Extent : packoffset(c000.x);
  float2 Filter_ExtentInverse : packoffset(c000.z);
  float2 Filter_ScreenPosToViewportScale : packoffset(c001.x);
  float2 Filter_ScreenPosToViewportBias : packoffset(c001.z);
  uint2 Filter_ViewportMin : packoffset(c002.x);
  uint2 Filter_ViewportMax : packoffset(c002.z);
  float2 Filter_ViewportSize : packoffset(c003.x);
  float2 Filter_ViewportSizeInverse : packoffset(c003.z);
  float2 Filter_UVViewportMin : packoffset(c004.x);
  float2 Filter_UVViewportMax : packoffset(c004.z);
  float2 Filter_UVViewportSize : packoffset(c005.x);
  float2 Filter_UVViewportSizeInverse : packoffset(c005.z);
  float2 Filter_UVViewportBilinearMin : packoffset(c006.x);
  float2 Filter_UVViewportBilinearMax : packoffset(c006.z);
  float2 Additive_Extent : packoffset(c008.x);
  float2 Additive_ExtentInverse : packoffset(c008.z);
  float2 Additive_ScreenPosToViewportScale : packoffset(c009.x);
  float2 Additive_ScreenPosToViewportBias : packoffset(c009.z);
  uint2 Additive_ViewportMin : packoffset(c010.x);
  uint2 Additive_ViewportMax : packoffset(c010.z);
  float2 Additive_ViewportSize : packoffset(c011.x);
  float2 Additive_ViewportSizeInverse : packoffset(c011.z);
  float2 Additive_UVViewportMin : packoffset(c012.x);
  float2 Additive_UVViewportMax : packoffset(c012.z);
  float2 Additive_UVViewportSize : packoffset(c013.x);
  float2 Additive_UVViewportSizeInverse : packoffset(c013.z);
  float2 Additive_UVViewportBilinearMin : packoffset(c014.x);
  float2 Additive_UVViewportBilinearMax : packoffset(c014.z);
  float4 SampleOffsets[1] : packoffset(c016.x);
  float4 SampleWeights[1] : packoffset(c080.x);
  float2 Output_Extent : packoffset(c209.x);
  float2 Output_ExtentInverse : packoffset(c209.z);
  float2 Output_ScreenPosToViewportScale : packoffset(c210.x);
  float2 Output_ScreenPosToViewportBias : packoffset(c210.z);
  uint2 Output_ViewportMin : packoffset(c211.x);
  uint2 Output_ViewportMax : packoffset(c211.z);
  float2 Output_ViewportSize : packoffset(c212.x);
  float2 Output_ViewportSizeInverse : packoffset(c212.z);
  float2 Output_UVViewportMin : packoffset(c213.x);
  float2 Output_UVViewportMax : packoffset(c213.z);
  float2 Output_UVViewportSize : packoffset(c214.x);
  float2 Output_UVViewportSizeInverse : packoffset(c214.z);
  float2 Output_UVViewportBilinearMin : packoffset(c215.x);
  float2 Output_UVViewportBilinearMax : packoffset(c215.z);
};

SamplerState Filter_Sampler : register(s0);

SamplerState Additive_Sampler : register(s1);

[numthreads(8, 8, 1)]
void main(
  uint3 SV_DispatchThreadID : SV_DispatchThreadID,
  uint3 SV_GroupID : SV_GroupID,
  uint3 SV_GroupThreadID : SV_GroupThreadID,
  uint SV_GroupIndex : SV_GroupIndex
) {
  uint _13 = Output_ViewportMin.x + SV_DispatchThreadID.x;
  uint _14 = Output_ViewportMin.y + SV_DispatchThreadID.y;
  float _15 = float((uint)_13);
  float _16 = float((uint)_14);
  float _17 = _15 + 0.5f;
  float _18 = _16 + 0.5f;
  float _22 = _17 * Output_ExtentInverse.x;
  float _23 = _18 * Output_ExtentInverse.y;
  float _24 = _22 + -0.5f;
  float _25 = _23 + -0.5f;
  float _26 = abs(_24);
  float _27 = abs(_25);
  float _28 = max(_26, _27);
  bool _29 = !(_28 >= 0.5f);
  if (_29) {
    float _34 = (SampleOffsets[0].x) + _22;
    float _35 = (SampleOffsets[0].y) + _23;
    float4 _38 = Filter_Texture.SampleLevel(Filter_Sampler, float2(_34, _35), 0.0f);
    float _48 = (SampleWeights[0].x) * _38.x;
    float _49 = (SampleWeights[0].y) * _38.y;
    float _50 = (SampleWeights[0].z) * _38.z;
    float _51 = (SampleWeights[0].w) * _38.w;
    float4 _54 = Additive_Texture.SampleLevel(Additive_Sampler, float2(_22, _23), 0.0f);
    float _59 = _54.x + _48;
    float _60 = _54.y + _49;
    float _61 = _54.z + _50;
    float _62 = _54.w + _51;
    uint _63 = uint(_15);
    uint _64 = uint(_16);
    RWOutputTexture[int2(_63, _64)] = float4(_59, _60, _61, _62);
  }
}
